###############################################################################
Linking and Linkage in DH-acc
###############################################################################

This is an overview of how linking works with DH-acc and how linkage affects
that. Linking may sound complicated, but if you've ever made an ACS library
with acc, you've experienced linking. It's just the combining of multiple
bytecode files such that they can use each other's resources.

===============================================================================
Linking
===============================================================================

There are two types of linking. Dynamic linking and static linking. Dynamic
linking is what's used by acc's ACS libraries. The joining of bytecode is done
at run-time by the target engine. Static linking on the other hand, is done by
the compiler itself.

As an example, suppose there are two source files a.ds and b.ds. Dynamic
linking would look like this, ignoring issues of target and other options:
  DH-acc -oa.lib a.ds
  DH-acc -ob.lib b.ds

And static linking would look like this:
  DH-acc -c -oa.o a.ds
  DH-acc -c -ob.o b.ds
  DH-acc -oa.lib a.o b.o

The -c is shorthand for --output=object which tells DH-acc to output its
intermediary format. It's important that when the static linking is done, all
of the same options be used as for the individual compiles. (There are
exceptions, but few are reliable and it's much easier to just always use the
same options.)

Really, that's most of the how. The real question is which to use. The why.

Static linking has the advantage that the compiler sees more of the code at
once. This allows it to do automatic allocations of things like global arrays
and static variables.

Dynamic linking, on the other hand, avoids some of the subtle problems that can
occur if multiple libraries have the same functions statically linked in. It
also gives each library its own set of map variables, in the event that there
is otherwise a shortage of them.

===============================================================================
Linkage
===============================================================================

Linking is done such that each function or object is given a name. Those names
are generated based on the source name of the function or object. And how that
name is translated (or mangled) is linkage.

Linkages fall into two basic category. Internal linkage and external linkage.
Internal linkage means that no other file can see that function or object. Put
simply, its generated name is unique to the file it came from. External linkage
instead bases the generated name only on the data specific to that function or
object. This means that other files can come up with the same name and therefore
find the function or object during linking.

As might be guessed, there is only one type of internal linkage. There are,
however, a potentially unlimited number of external linkage options. DH-acc has
a variety, but only two that a programmer needs to be aware of plus internal.

===========================================================
Internal
===========================================================

Using internal linkage is relatively simple. Forward declarations:
  __intern __function void SomeFunc(int *p);
  __intern __variable static int TheVar;

The definitions:
  __intfunc void SomeFunc(int *i) { /* ... */ };
  __intvar static int TheVar;

In addition, use of __function, __script, or __variable inside of a function
will use internal linkage.

===========================================================
External
===========================================================

Forward declarations:
  extern __function void M_AnotherFunc(int *p);
  extern __variable static int Mstuff;

The definitions:
  __extfunc void M_AnotherFunc(int *p) { /* ... */ };
  __extvar static int Mstuff;

In addition, use of __function, __script, or __variable at the top level will
use external linkage.

The above uses the default linkage model "DS". An explicit linkage can be
specified like so:
  extern "DS" __function void P_DoStuff(int *p);
  extern "DS" __variable static int Pstore;

  __extfunc "DS" __function void P_DoStuff(int *p) { /* ... */ };
  __extvar "DS" static int Pstore;

There also exists "ACS" linkage for interfacing with ACS. (See ACS2DS.txt.)

###############################################################################
EOF
###############################################################################

