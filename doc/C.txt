###############################################################################
C Language Implementation
###############################################################################

This file describes DH-acc's support for the C programming language. In general,
an attempt is made to conform to the C11 specification.

In addition, extensions from Embedded C are in use.

===============================================================================
Implementation-Defined Behavior
===============================================================================

The C standard requires that implementations document choices of certain
behavior. This section provides that documentation for DH-acc. Features not yet
supported by DH-acc have no definition here.

===========================================================
J.3.1 Translation
===========================================================

-----------------------------------------------------------
How a diagnostic is identified (3.10, 5.1.1.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether each nonempty sequence of white-space characters
other than new-line is retained or replaced by one space
character in translation phase 3 (5.1.1.2).
-----------------------------------------------------------

Nonempty sequences of white-space characters other than new-line are not
replaced by one space.

===========================================================
J.3.2 Environment
===========================================================

-----------------------------------------------------------
The mapping between physical source file multibyte
characters and the source character set in translation
phase 1 (5.1.1.2).
-----------------------------------------------------------

-----------------------------------------------------------
The name and type of the function called at program startup
in a freestanding environment (5.1.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The effect of program termination in a freestanding
environment (5.1.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
An alternative manner in which the main function may be
defined (5.1.2.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The values given to the strings pointed to by the argv
argument to main (5.1.2.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
What constitutes an interactive device (5.1.2.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a program can have more than one thread of
execution in a freestanding environment (5.1.2.4).
-----------------------------------------------------------

-----------------------------------------------------------
The set of signals, their semantics, and their default
handling (7.14).
-----------------------------------------------------------

-----------------------------------------------------------
Signal values other than SIGFPE, SIGILL, and SIGSEGV that
correspond to a computational exception (7.14.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
Signals for which the equivalent of signal(sig, SIG_IGN);
is executed at program startup (7.14.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
The set of environment names and the method for altering
the environment list used by the getenv function (7.22.4.6).
-----------------------------------------------------------

-----------------------------------------------------------
The manner of execution of the string by the system
function (7.22.4.8).
-----------------------------------------------------------

===========================================================
J.3.3 Identifiers
===========================================================

-----------------------------------------------------------
Which additional multibyte characters may appear in
identifiers and their correspondence to universal character
names (6.4.2).
-----------------------------------------------------------

-----------------------------------------------------------
The number of significant initial characters in an
identifier (5.2.4.1, 6.4.2).
-----------------------------------------------------------

The implementation imposes no meaningful limit on significant characters in any
identifier.

===========================================================
J.3.4 Characters
===========================================================

-----------------------------------------------------------
The number of bits in a byte (3.6).
-----------------------------------------------------------

32.

-----------------------------------------------------------
The values of the members of the execution character set
(5.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The unique value of the member of the execution character
set produced for each of the standard alphabetic escape
sequences (5.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The value of a char object into which has been stored any
character other than a member of the basic execution
character set (6.2.5).
-----------------------------------------------------------

-----------------------------------------------------------
Which of signed char or unsigned char has the same range,
representation, and behavior as "plain" char
(6.2.5, 6.3.1.1).
-----------------------------------------------------------

A "plain" char has the same representation as signed char.

-----------------------------------------------------------
The mapping of members of the source character set (in
character constants and string literals) to members of the
execution character set (6.4.4.4, 5.1.1.2).
-----------------------------------------------------------

-----------------------------------------------------------
The value of an integer character constant containing more
than one character or containing a character or escape
sequence that does not map to a single-byte execution
character (6.4.4.4).
-----------------------------------------------------------

Such a character constant has no defined value at this time and is an error.

-----------------------------------------------------------
The value of a wide character constant containing more than
one multibyte character or a single multibyte character
that maps to multiple members of the extended execution
character set, or containing a multibyte character or
escape sequence not represented in the extended execution
character set (6.4.4.4).
-----------------------------------------------------------

-----------------------------------------------------------
The current locale used to convert a wide character
constant consisting of a single multibyte character that
maps to a member of the extended execution character set
into a corresponding wide character code (6.4.4.4).
-----------------------------------------------------------

-----------------------------------------------------------
Whether differently-prefixed wide string literal tokens can
be concatenated and, if so, the treatment of the resulting
multibyte character sequence (6.4.5).
-----------------------------------------------------------

-----------------------------------------------------------
The current locale used to convert a wide string literal
into corresponding wide character codes (6.4.5).
-----------------------------------------------------------

-----------------------------------------------------------
The value of a string literal containing a multibyte
character or escape sequence not represented in the
execution character set (6.4.5).
-----------------------------------------------------------

-----------------------------------------------------------
The encoding of any of wchar_t, char16_t, and char32_t
where the corresponding standard encoding macro
(__STDC_ISO_10646__, __STDC_UTF_16__, or __STDC_UTF_32__)
is not defined (6.10.8.2).
-----------------------------------------------------------

===========================================================
J.3.5 Integers
===========================================================

-----------------------------------------------------------
Any extended integer types that exist in the implementation
(6.2.5).
-----------------------------------------------------------

-----------------------------------------------------------
Whether signed integer types are represented using sign and
magnitude, two's complement, or ones' complement, and
whether the extraordinary value is a trap representation or
an ordinary value (6.2.6.2).
-----------------------------------------------------------

Signed integers have two's complement representation. Extraordinary values are
silently truncated to an ordinary value.

-----------------------------------------------------------
The rank of any extended integer type relative to another
extended integer type with the same precision (6.3.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
The result of, or the signal raised by, converting an
integer to a signed integer type when the value cannot be
represented in an object of that type (6.3.1.3).
-----------------------------------------------------------

No signal is raised. The result is the least significant bits of the value
interpreted as the signed integer type. The result is always a valid signed
integer value.

-----------------------------------------------------------
The results of some bitwise operations on signed integers
(6.5).
-----------------------------------------------------------

Except for the >> operator, bitwise operations on signed integers behave as if
the expression was first cast to the corresponding unsigned integer type, the
operation applied, and the result cast back to the signed integer type.

For the >> operator applied to a negative value, if the type of the expression
is int, the result is 1-filled. Otherwise, the result is 0-filled.

===========================================================
J.3.6 Floating point
===========================================================

-----------------------------------------------------------
The accuracy of the floating-point operations and of the
library functions in <math.h> and <complex.h> that return
floating-point results (5.2.4.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The accuracy of the conversions between floating-point
internal representations and string representations
performed by the library functions in <stdio.h>, <stdlib.h>,
and <wchar.h> (5.2.4.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The rounding behaviors characterized by non-standard values
of FLT_ROUNDS (5.2.4.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The evaluation methods characterized by non-standard
negative values of FLT_EVAL_METHOD (5.2.4.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The direction of rounding when an integer is converted to a
floating-point number that cannot exactly represent the
original value (6.3.1.4).
-----------------------------------------------------------

-----------------------------------------------------------
The direction of rounding when a floating-point number is
converted to a narrower floating-point number (6.3.1.5).
-----------------------------------------------------------

-----------------------------------------------------------
How the nearest representable value or the larger or
smaller representable value immediately adjacent to the
nearest representable value is chosen for certain floating
constants (6.4.4.2).
-----------------------------------------------------------

-----------------------------------------------------------
Whether and how floating expressions are contracted when
not disallowed by the FP_CONTRACT pragma (6.5).
-----------------------------------------------------------

-----------------------------------------------------------
The default state for the FENV_ACCESS pragma (7.6.1).
-----------------------------------------------------------

-----------------------------------------------------------
Additional floating-point exceptions, rounding modes,
environments, and classifications, and their macro names
(7.6, 7.12).
-----------------------------------------------------------

-----------------------------------------------------------
The default state for the FP_CONTRACT pragma (7.12.2).
-----------------------------------------------------------

===========================================================
J.3.7 Arrays and pointers
===========================================================

-----------------------------------------------------------
The result of converting a pointer to an integer or vice
versa (6.3.2.3).
-----------------------------------------------------------

-----------------------------------------------------------
The size of the result of subtracting two pointers to
elements of the same array (6.5.6).
-----------------------------------------------------------

The result of subtracting two pointers is a signed int.

===========================================================
J.3.8 Hints
===========================================================

-----------------------------------------------------------
The extent to which suggestions made by using the register
storage-class specifier are effective (6.7.1).
-----------------------------------------------------------

Use of the register storage-class specifier is binding; all such variables will
use registers.

-----------------------------------------------------------
The extent to which suggestions made by using the inline
function specifier are effective (6.7.4).
-----------------------------------------------------------

===========================================================
J.3.9 Structures, unions, enumerations, and bit-fields
===========================================================

-----------------------------------------------------------
Whether a "plain" int bit-field is treated as a signed int
bit-field or as an unsigned int bit-field (6.7.2, 6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
Allowable bit-field types other than _Bool, signed int, and
unsigned int (6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether atomic types are permitted for bit-fields (6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a bit-field can straddle a storage-unit boundary
(6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The order of allocation of bit-fields within a unit
(6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The alignment of non-bit-field members of structures
(6.7.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The integer type compatible with each enumerated type
(6.7.2.2).
-----------------------------------------------------------

===========================================================
J.3.10 Qualifiers
===========================================================

-----------------------------------------------------------
What constitutes an access to an object that has
volatile-qualified type (6.7.3).
-----------------------------------------------------------

The following constitutes access to an object with volatile-qualified type:
- Storing a value into such an object, regardless of source.
- Use of such an object in an expression that is not cast to void.

===========================================================
J.3.11 Qualifiers
===========================================================

-----------------------------------------------------------
The locations within #pragma directives where header name
preprocessing tokens are recognized (6.4, 6.4.7).
-----------------------------------------------------------

-----------------------------------------------------------
How sequences in both forms of header names are mapped to
headers or external source file names (6.4.7).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the value of a character constant in a constant
expression that controls conditional inclusion matches the
value of the same character constant in the execution
character set (6.10.1).
-----------------------------------------------------------

Yes.

-----------------------------------------------------------
Whether the value of a single-character character constant
in a constant expression that controls conditional
inclusion may have a negative value (6.10.1).
-----------------------------------------------------------

No.

-----------------------------------------------------------
The places that are searched for an included < > delimited
header, and how the places are specified or the header is
identified (6.10.2).
-----------------------------------------------------------

-----------------------------------------------------------
How the named source file is searched for in an included
" " delimited header (6.10.2).
-----------------------------------------------------------

-----------------------------------------------------------
The method by which preprocessing tokens (possibly
resulting from macro expansion) in a #include directive are
combined into a header name (6.10.2).
-----------------------------------------------------------

-----------------------------------------------------------
The nesting limit for #include processing (6.10.2).
-----------------------------------------------------------

The implementation imposes no meaningful limit.

-----------------------------------------------------------
Whether the # operator inserts a \ character before the \
character that begins a universal character name in a
character constant or string literal (6.10.3.2).
-----------------------------------------------------------

-----------------------------------------------------------
The behavior on each recognized non-STDC #pragma directive
(6.10.6).
-----------------------------------------------------------

-----------------------------------------------------------
The definitions for __DATE__ and __TIME__ when respectively,
the date and time of translation are not available
(6.10.8.1).
-----------------------------------------------------------

===========================================================
J.3.12 Library functions
===========================================================

-----------------------------------------------------------
Any library facilities available to a freestanding program,
other than the minimal set required by clause 4 (5.1.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The format of the diagnostic printed by the assert macro
(7.2.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
The representation of the floating-point status flags
stored by the fegetexceptflag function (7.6.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the feraiseexcept function raises the "inexact"
floating-point exception in addition to the "overflow" or
"underflow" floating-point exception (7.6.2.3).
-----------------------------------------------------------

-----------------------------------------------------------
Strings other than "C" and "" that may be passed as the
second argument to the setlocale function (7.11.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
The types defined for float_t and double_t when the value
of the FLT_EVAL_METHOD macro is less than 0 (7.12).
-----------------------------------------------------------

-----------------------------------------------------------
Domain errors for the mathematics functions, other than
those required by this International Standard (7.12.1).
-----------------------------------------------------------

-----------------------------------------------------------
The values returned by the mathematics functions on domain
errors or pole errors (7.12.1).
-----------------------------------------------------------

-----------------------------------------------------------
The values returned by the mathematics functions on
underflow range errors, whether errno is set to the value
of the macro ERANGE when the integer expression
math_errhandling & MATH_ERRNO is nonzero, and whether the
"underflow" floating-point exception is raised when the
integer expression math_errhandling & MATH_ERREXCEPT is
nonzero. (7.12.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a domain error occurs or zero is returned when an
fmod function has a second argument of zero (7.12.10.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a domain error occurs or zero is returned when a
remainder function has a second argument of zero
(7.12.10.2).
-----------------------------------------------------------

-----------------------------------------------------------
The base-2 logarithm of the modulus used by the remquo
functions in reducing the quotient (7.12.10.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a domain error occurs or zero is returned when a
remquo function has a second argument of zero (7.12.10.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the equivalent of signal(sig, SIG_DFL); is executed
prior to the call of a signal handler, and, if not, the
blocking of signals that is performed (7.14.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
The null pointer constant to which the macro NULL expands
(7.19).
-----------------------------------------------------------

((void *)0)

-----------------------------------------------------------
Whether the last line of a text stream requires a
terminating new-line character (7.21.2).
-----------------------------------------------------------

-----------------------------------------------------------
Whether space characters that are written out to a text
stream immediately before a new-line character appear when
read in (7.21.2).
-----------------------------------------------------------

-----------------------------------------------------------
The number of null characters that may be appended to data
written to a binary stream (7.21.2).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the file position indicator of an append-mode
stream is initially positioned at the beginning or end of
the file (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a write on a text stream causes the associated file
to be truncated beyond that point (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
The characteristics of file buffering (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether a zero-length file actually exists (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
The rules for composing valid file names (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the same file can be simultaneously open multiple
times (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
The nature and choice of encodings used for multibyte
characters in files (7.21.3).
-----------------------------------------------------------

-----------------------------------------------------------
The effect of the remove function on an open file
(7.21.4.1).
-----------------------------------------------------------

-----------------------------------------------------------
The effect if a file with the new name exists prior to a
call to the rename function (7.21.4.2).
-----------------------------------------------------------

-----------------------------------------------------------
Whether an open temporary file is removed upon abnormal
program termination (7.21.4.3).
-----------------------------------------------------------

-----------------------------------------------------------
Which changes of mode are permitted (if any), and under
what circumstances (7.21.5.4).
-----------------------------------------------------------

-----------------------------------------------------------
The style used to print an infinity or NaN, and the meaning
of any n-char or n-wchar sequence printed for a NaN
(7.21.6.1, 7.29.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The output for %p conversion in the fprintf or fwprintf
function (7.21.6.1, 7.29.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The interpretation of a - character that is neither the
first nor the last character, nor the second where a ^
character is the first, in the scanlist for %[ conversion
in the fscanf or fwscanf function (7.21.6.2, 7.29.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The set of sequences matched by a %p conversion and the
interpretation of the corresponding input item in the
fscanf or fwscanf function (7.21.6.2, 7.29.2.2).
-----------------------------------------------------------

-----------------------------------------------------------
The value to which the macro errno is set by the fgetpos,
fsetpos, or ftell functions on failure (7.21.9.1, 7.21.9.3,
7.21.9.4).
-----------------------------------------------------------

-----------------------------------------------------------
The meaning of any n-char or n-wchar sequence in a string
representing a NaN that is converted by the strtod, strtof,
strtold, wcstod, wcstof, or wcstold function (7.22.1.3,
7.29.4.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether or not the strtod, strtof, strtold, wcstod, wcstof,
or wcstold function sets errno to ERANGE when underflow
occurs (7.22.1.3, 7.29.4.1.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the calloc, malloc, and realloc functions return a
null pointer or a pointer to an allocated object when the
size requested is zero (7.22.3).
-----------------------------------------------------------

The functions calloc, malloc, and realloc return a null pointer for size 0
allocations.

-----------------------------------------------------------
Whether open streams with unwritten buffered data are
flushed, open streams are closed, or temporary files are
removed when the abort or _Exit function is called
(7.22.4.1, 7.22.4.5).
-----------------------------------------------------------

-----------------------------------------------------------
The termination status returned to the host environment by
the abort, exit, _Exit, or quick_exit function (7.22.4.1,
7.22.4.4, 7.22.4.5, 7.22.4.7).
-----------------------------------------------------------

-----------------------------------------------------------
The value returned by the system function when its argument
is not a null pointer (7.22.4.8).
-----------------------------------------------------------

-----------------------------------------------------------
The range and precision of times representable in clock_t
and time_t (7.27).
-----------------------------------------------------------

-----------------------------------------------------------
The local time zone and Daylight Saving Time (7.27.1).
-----------------------------------------------------------

-----------------------------------------------------------
The era for the clock function (7.27.2.1).
-----------------------------------------------------------

-----------------------------------------------------------
The TIME_UTC epoch (7.27.2.5).
-----------------------------------------------------------

-----------------------------------------------------------
The replacement string for the %Z specifier to the strftime,
and wcsftime functions in the "C" locale (7.27.3.5,
7.29.5.1).
-----------------------------------------------------------

-----------------------------------------------------------
Whether the functions in <math.h> honor the rounding
direction mode in an IEC 60559 conformant implementation,
unless explicitly specified otherwise (F.10).
-----------------------------------------------------------

===============================================================================
Implementation Extensions
===============================================================================

===========================================================
Asmfunc Attribute
===========================================================

  asmfunc-attribute:
    asmfunc-attribute-name
    asmfunc-attribute-name ( identifier )
    asmfunc-attribute-name ( identifier , identifier )

  asmfunc-attribute-name:
    <asmfunc>
    <__asmfunc>
    <__asmfunc__>

===========================================================
Linespec Attribute
===========================================================

  linespec-attribute:
    linespec-attribute-name
    linespec-attribute-name ( integer-constant )

  linespec-attribute-name:
    <linespec>
    <__linespec>
    <__linespec__>

===========================================================
Native Attribute
===========================================================

  native-attribute:
    native-attribute-name
    native-attribute-name ( integer-constant )

  native-attribute-name:
    <native>
    <__native>
    <__native__>

===========================================================
Script Attribute
===========================================================

  script-attribute:
    script-attribute-name
    script-attribute-name ( script-type script-flag-list(opt) )
    script-attribute-name ( script-type script-flag-list(opt) , integer-constant )
    script-attribute-name ( script-type script-flag-list(opt) , string-literal )

  script-attribute-name:
    <script>
    <__script>
    <__script__>

  script-type:
    <closed>
    <__closed>
    <__closed__>
    <open>
    <__open>
    <__open__>
    <respawn>
    <death>
    <__death>
    <__death__>
    <enter>
    <__enter>
    <__enter_>
    <lightning>
    <__lightning>
    <__lightning__>
    <unloading>
    <__unloading>
    <__unloading__>
    <disconnect>
    <__disconnect>
    <__disconnect__>
    <return>
    <__return>
    <__return__>

  script-flag-list:
    | script-flag
    script-flag-list | script-flag

  script-flag:
    <net>
    <__net>
    <__net__>
    <clientside>
    <__clientside>
    <__clientside__>

===========================================================
Function Attributes
===========================================================

  function-attributes-lists:
    function-attributes
    function-attributes-lists function-attributes

  function-attributes:
    <__attribute__> ( ( function-attribute-list(opt) ) )

  function-attribute-list:
    function-attribute
    function-attribute-list , function-attribute

  function-attribute:
    asmfunc-attribute
    linespec-attribute
    native-attribute
    script-attribute

===========================================================
Primary Expression
===========================================================

  primary-expression: add
    printf-expression

===========================================================
Printf Expression
===========================================================

  printf-expression:
    <__printf> printf-specifier(opt) ( string-literal )
    <__printf> printf-specifier(opt) ( string-literal , argument-expression-list )

  printf-specifier:
    <print>
    <__print>
    <__print__>
    <bold>
    <__bold>
    <__bold__>
    <hud>
    <__hud>
    <__hud__>
    <hud_bold>
    <__hud_bold>
    <__hud_bold__>
    <log>
    <__log>
    <__log__>
    <string>
    <__string>
    <__string__>

Performs a compile-time checked formatted print. Syntax of the format string is
as described for fprintf, with the exception of %n which is not available.

If no printf-specifier is given, the behavior is as if print was given.

===========================================================
Declaration
===========================================================

  declaration: add
    address_space-declaration

===========================================================
Address_Space Declaration
===========================================================

  address_space-declaration:
    <__address_space> storage-class-specifier(opt) address_space-specifier
      identifier address_space-expression(opt) ;

  address_space-specifier:
    <__maparray>
    <__worldarray>
    <__globalarray>

  address_space-expression:
    = constant-expression

Constraints:
  The storage class specifier, if provided, shall be either extern or static.

  The result of a constant expression in an address_space expression shall not
  be negative.

Semantics:
  Declares or defines an address space for use as an address space name.

  If the storage class specifier is extern and there is no address_space
  expression, the declaration is a forward declaration. Otherwise it defines a
  new address space.

  If an address space definition has no address_space expression, it is assigned
  one automatically.

  Address spaces have the same linkage as objects. If an address space and an
  object in the same scope have the same name, the behavior is undefined.

===========================================================
External Declaration
===========================================================

  external-declaration: add
    library-declaration

===========================================================
Library Declaration
===========================================================

  library-declaration:
    <__library> ( string-literal ) ;

A library declaration indicates the name of a file that will be needed by the
final output.

###############################################################################
EOF
###############################################################################

