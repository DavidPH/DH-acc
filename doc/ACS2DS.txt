###############################################################################
Porting ACS to DS
###############################################################################

This is a overview of porting ACS programs to DS. Each section tries to cover
an ACS feature that is different in DS. This guide does not cover features
unique to DS.

===============================================================================
Program Invocation
===============================================================================

acc:
  acc infile.acs outfile.o

DH-acc:
  DH-acc --target=ZDoom infile.ds outfile.o

DH-acc defaults to targeting Hexen rather than ZDoom. Furthermore, there are
numerous options that can be passed to DH-acc that affects the output.

===============================================================================
World/Global Variables/Arrays
===============================================================================

ACS:
  world int 1:some_world_var;
  global int 3:some_global_array[];

DS:
  __worldregister int some_world_var @ 1;
  __globalarray(3) int[] some_global_array;

===============================================================================
Fixed Is A Real Type
===============================================================================

ACS:
  int some_int = 42;
  fixed some_x = some_int << 16;
  some_x = FixedMul(some_x, 10.0);
  some_int = some_x >> 16;

DS:
  int some_int = 42;
  fixed some_x = some_int;
  some_x *= 10;
  some_int = some_x;

===============================================================================
Suspend
===============================================================================

ACS:
  suspend;

DS:
  Suspend();

Note the parentheses. Suspend is a function and if you do not apply the call
syntax, it will not suspend your script.

===============================================================================
HudMessage
===============================================================================

ACS:
  HudMessage(s:"an int: ", i:3, s:" and a fixed: ", f:4.5;
             HUDMSG_PLAIN, 0, 0, 0.5, 0.5, 10.0);

DS:
  #define hudf __printf<__printf_hud>
  hudf("an int: %i and a fixed: %X", 3, 4.5,
       HUDMSG_PLAIN, 0, 0, 0.5, 0.5, 10);

===============================================================================
Array Initialization
===============================================================================

ACS:
  int an_array[4] = {1, 2, 3, 4};
  int another[] = {5, 6, 7, 8, 9};

DS:
  int[4] an_array = {1; 2; 3; 4;};
  int[] another = {5; 6; 7; 8; 9;};

In DS, blocks are a normal expression even for initialization.

===============================================================================
Libraries
===============================================================================

ACS:
  #library "liba"

DS:
  __library("liba");

ACS:
  #import "liba.acs"

DS:
  #include "liba.dh"

Basically, in DS you separate a library into an interface/header (a .dh file)
and an implementation/source (a .ds file). In the header, you use __library to
name the library for loading by the target engine.

===============================================================================
Semicolons
===============================================================================

ACS:
  if(x) {f1(); f2();}
  function void DoNothing(void) {}

DS:
  if(x) {f1(); f2();};
  function void DoNothing(void) {};

DS in general requires a lot more semicolons than ACS, because everything is an
expression. Just a heads up to not be discouraged by the compiler errors.

###############################################################################
Interfacing ACS with DS
###############################################################################

When it's impractical or impossible to port an entire project from ACS to DS,
they can instead be made to coexist.

===============================================================================
Importing DS Headers From ACS
===============================================================================

ACS header:
  #library "liba"

  int a;
  function void f(void) {}

DS header:
  __library("liba");

  extern "ACS" __mapregister int a;
  extern "ACS" __function void f();

ACS source:
  #import "liba.acs"

DS source:
  #include "liba.dh"

  __extvar "ACS" __mapregister int a;
  __extfunc "ACS" void f() { /* ... */ };

===============================================================================
Writing DS Headers For ACS
===============================================================================

ACS source:
  #library "libb"

  int b;
  function void g(void) { /* ... */ }

DS header:
  __library("libb");

  extern "ACS" __mapregister int b;
  extern "ACS" __function void g();

DS source:
   #include "libb.dh"

###############################################################################
EOF
###############################################################################

