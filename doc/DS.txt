###############################################################################
DamnScript Language Overview
###############################################################################

===============================================================================
Preprocessor
===============================================================================

DS uses a token-based preprocessor. All commands begin with a '#' character.

===========================================================
Conditional Compilation
===========================================================

-----------------------------------------------------------
Else-If
-----------------------------------------------------------

  # <elif> expression

-----------------------------------------------------------
Else
-----------------------------------------------------------

  # <else>

-----------------------------------------------------------
End-If
-----------------------------------------------------------

  # <endif>

-----------------------------------------------------------
If
-----------------------------------------------------------

  # <if> expression

-----------------------------------------------------------
If-Def
-----------------------------------------------------------

  # <ifdef> identifier

Equivalent to # if defined identifier.

-----------------------------------------------------------
If-Not-Def
-----------------------------------------------------------

  # <ifndef> identifier

Equivalent to # if ! defined identifier.

===========================================================
Macros
===========================================================

Like C, DS macros come in both object-like and function-like flavors.

-----------------------------------------------------------
Define
-----------------------------------------------------------

  # <define> identifier tokens

Defines an object-like macro.

-----------------------------------------------------------
Macro
-----------------------------------------------------------

  # <define> identifier( argument-list ) tokens

Defines a function-like macro.

During expansion, arguments prefixed with # are converted to string literals.
After expansion, tokens prefixed or suffixed with ## are joined.

-----------------------------------------------------------
Undefine
-----------------------------------------------------------

  # <undef> identifier

Undefines a macro.

===========================================================
Miscellaneous
===========================================================

-----------------------------------------------------------
Error
-----------------------------------------------------------

  # <error> string-literal

Halts compilation with the given error message.

-----------------------------------------------------------
Include
-----------------------------------------------------------

  # <include> string-literal

Inserts an external file's tokens in place of the directive.

===============================================================================
Keywords
===============================================================================

  keyword-expression:
    cast-expression
    extern-expression
    function-expression
    internal-expression
    iteration-expression:
    jump-expression
    printf-expression
    select-expression
    sizeof-expression
    typeinfo-expression
    variable-expression

===========================================================
Cast Expressions
===========================================================

  cast-expression:
    cast-specifier < type > ( expression )

  cast-specifier: one of
    <const_cast> <dynamic_cast> <__force_cast> <reinterpret_cast> <static_cast>

===========================================================
External Declarations
===========================================================

  extern-expression:
    <extern> extern-specifier(opt) extern-declaration
    <__intern> extern-declaration

  extern-declaration:
    extern-declaration-single
    { extern-declaration-list(opt) }

  extern-declaration-single:
    <__function> function-args
    <__script> function-args allocate-specifier(opt)
    <__variable> storage-class type extern-variable-list

  extern-declaration-list:
    extern-declaration-single ; extern-declaration-list(opt)

  extern-variable-list:
    extern-variable-declaration
    extern-variable-declaration , extern-variable-list

  extern-variable-declaration:
    identifier allocate-specifier(opt)

  extern-specifier:
    "ACS"
    "DS"

Forward-declares a function or variable. The extern-specifier is used to
specify linkage for compatibility with other languages or compilers.

===========================================================
Function Definitions
===========================================================

  function-expression:
    builtin-specifier function-args allocate-specifier
    function-specifier function-args prefix-expression
    script-specifier function-args script-type-list(opt)
      allocate-specifier(opt) prefix-expression

  builtin-specifier: one of
    <__asmfunc> <__linespec> <__native>

  function-args:
    bare-type(opt) function-name(opt) ( function-arg-list(opt) )
    function-name(opt) ( function-arg-list(opt) ) -> type

  allocate-specifier:
    @ prefix-expression

  function-specifier: one of
    <__function> <__extfunc> <__intfunc>

  script-specifier: one of
    <__script> <__extscript> <__intscript>

  script-type-list:
    script-type(opt) script-flag-list(opt)

  function-name:
    identifier
    ( function-name )

  function-arg-list:
    type identifier(opt)
    type identifier(opt) , function-arg-list

  script-type: one of
    <__closed> <__death> <__disconnect> <__enter> <__lightning>
      <__open> <__respawn> <__return> <__unloading>

  script-flag-list:
    script-flag script-flag-list(opt)

  script-flag: one of
    <__clientside> <__net>

-----------------------------------------------------------
Builtin Definitions
-----------------------------------------------------------

These (__asmfunc, __linespec, __native) define functions which are internal to
the target engine. Whether they can be invoked with a run-time value or require
a compile-time value is determined by the target.

These definitions always yield a pointer to the defined function, even if it
cannot be used dynamically.

===========================================================
Internals
===========================================================

  internal-expression:
    <__library> ( string-literal )
    <__ocode> ( identifier )
    <__ocode> ( identifier , identifier )
    <__symbol> ( type , string-literal )

===========================================================
Iteration Expressions
===========================================================

  iteration-expression:
    <do> loop-name(opt) prefix-expression <while> ( expression )
    <for> loop-name(opt) ( expression(opt) ; expression(opt) ; expression(opt) )
      prefix-expression
    <while> loop-name(opt) ( expression ) prefix-expression

  loop-name:
    : identifier

===========================================================
Jump Expressions
===========================================================

  jump-expression:
    <break> identifier(opt)
    <continue> identifier(opt)
    <goto> identifier
    <goto> <case> <default>
    <goto> <case> expression
    <__goto_dyn> expression
    <return> expression(opt)

-----------------------------------------------------------
Break
-----------------------------------------------------------

If an identifier is provided immediately after the keyword, this terminates
the indicated named iteration or switch. Otherwise, it terminates the smallest
enclosing iteration or switch.

-----------------------------------------------------------
Continue
-----------------------------------------------------------

If an identifier is provided immediately after the keyword, this jumps to the
end of the indicated named iteration's body. Otherwise, it jumps to the end of
the smallest enclosing iteration's body.

===========================================================
Print Expressions
===========================================================

  printf-expression:
    <__output> prefix-expression
    <__printf> ( printf-expression-list )
    <__printf> < printf-specifier > ( printf-expression-list )

  printf-expression-list:
    string-literal
    string-literal , expression-list

  printf-specifier: one of
    <__printf_bold> <__printf_error> <__printf_hud> <__printf_hud_bold>
    <__printf_print> <__printf_string>

-----------------------------------------------------------
Output
-----------------------------------------------------------

Prints the expression for debugging. Shall accept any type.

-----------------------------------------------------------
Print Format
-----------------------------------------------------------

Prints a formatted string. Expressions are implicitly cast to the necessary
type. The printf-specifier indicates the type of printing operation and
defaults to __printf_print if omitted. Some operations require additional
expressions which must come after conversion expressions. Additionally, hud
operations have a differing number of arguments based on the msgtype.
Consequently, that field must be a compile-time constant. Yield depends on
operation.
  Supported conversion specifiers:
    %F (__real)
    %K (int) keybind (ACS k:)
    %L (__string) LANGUAGE-lump entry (ACS l:)
    %N (int) name (ACS n:)
    %X (__fixed)
    %c (char)
    %i (int)
    %p (void *) accepts extended-pointers
    %s (char *) accepts extended-pointers and __string
    %u (unsigned)
  Supported operations:
    __printf_bold -> void
    __printf_error -> void
    __printf_hud (int, int, int, __real, __real, __real, ...) -> void
    __printf_hud_bold (int, int, int, __real, __real, __real, ...) -> void
    __printf_log -> void
    __printf_print -> void
    __printf_string -> __string

===========================================================
Selection Expressions
===========================================================

  selection-expression:
    <if> ( expression ) prefix-expression
    <if> ( expression ) prefix-expression <else> prefix-expression
    <switch> loop-name(opt) ( expression ) prefix-expression

===========================================================
Type Information Expressions
===========================================================

  typeinfo-expression
    <sizeof> prefix-expression
    <sizeof> ( type )
    <__typestr> type

===========================================================
Variable Declarations
===========================================================

  variable-expression:
    variable-specifier(opt) storage-class type variable-list
    storage-class type variable-list
    bare-type variable-list
    <constexpr> type constexpr-list

  variable-specifier: one of
    <__variable> <__extvar> <__intvar>

  variable-list:
    variable-declaration
    variable-declaration , variable-list

  variable-declaration:
    identifier allocate-specifier(opt) variable-initializer(opt)

  variable-initializer:
    = assignment-expression

  constexpr-list:
    constexpr-declaration
    constexpr-declaration , constexpr-list

  constexpr-declaration:
    identifier = assignment-expression

-----------------------------------------------------------
Constants
-----------------------------------------------------------

Defines a named and typed constant.

===============================================================================
Operators
===============================================================================

===========================================================
Statements
===========================================================

  statement:
    expression(opt) ;
    identifier : statement
    <case> expression : statement
    <default> : statement

  statement-list:
    statement statement-list(opt)

A DS source file is a statement-list.

-----------------------------------------------------------
Labels
-----------------------------------------------------------

Defines a jump target for goto and the unary &&. Labels defined in this manner
are visible anywhere in the enclosing function, including prior to their
definition.

-----------------------------------------------------------
Cases/Default
-----------------------------------------------------------

Defines a jump target for the enclosing switch. For the default keyword, the
default jump target is defined.

===========================================================
Primary Expressions
===========================================================

  primary-expression:
    keyword-expression
    identifier
    character-literal
    numeric-literal
    string-literal
    ( expression )
    { statement-list(opt) }
    [ statement-list(opt) ]

-----------------------------------------------------------
Identifiers
-----------------------------------------------------------

An identifier is a primary expression only if it has been declared as a
constant or a variable (in which case it is an lvalue) or a function (in which
case it is a function designator).

-----------------------------------------------------------
Blocks
-----------------------------------------------------------

Groups a series of expressions. If braces are used, a new compilation context is
created. Otherwise the enclosing context is used directly.

The result is a __block_t object. If the result is cast to void, the contained
expressions are evaluated in the order they are written in. Otherwise, order of
evaluation is unspecified.

===========================================================
Suffix Operators
===========================================================

  suffix-expression:
    primary-expression
    suffix-expression [ expression ]
    suffix-expression ( expression-list(opt) )
    suffix-expression . identifier
    suffix-expression -> identifier
    suffix-expression ++
    suffix-expression --

  expression-list:
    assignment-expression
    expression-list , assignment-expression

===========================================================
Prefix Operators
===========================================================

  prefix-expression:
    suffix-expression
    ++ prefix-expression
    -- prefix-expression
    prefix-operator prefix-expression
    ( type ) prefix-expression

  prefix-operator: one of
    @ & * + - ~ !

===========================================================
Multiplicative Operators
===========================================================

  multiplicative-expression:
    prefix-expression
    multiplicative-expression * prefix-expression
    multiplicative-expression / prefix-expression
    multiplicative-expression % prefix-expression

===========================================================
Additive Operators
===========================================================

  additive-expression:
    multiplicative-expression
    additive-expression + multiplicative-expression
    additive-expression - multiplicative-expression

===========================================================
Shift Operators
===========================================================

  shift-expression:
    additive-expression
    shift-expression << additive-expression
    shift-expression >> additive-expression

===========================================================
Relational Operators
===========================================================

  relational-expression:
    shift-expression
    relational-expression < shift-expression
    relational-expression > shift-expression
    relational-expression <= shift-expression
    relational-expression >= shift-expression

===========================================================
Equality Operators
===========================================================

  equality-expression:
    relational-expression
    equality-expression == relational-expression
    equality-expression != relational-expression

===========================================================
Bitwise AND Operator
===========================================================

  bitwise-and-expression:
    equality-expression
    bitwise-and-expression & equality-expression

===========================================================
Bitwise Exclusive OR Operator
===========================================================

  bitwise-xor-expression:
    bitwise-and-expression
    bitwise-xor-expression ^ bitwise-and-expression

===========================================================
Bitwise Inclusive OR Operator
===========================================================

  bitwise-ior-expression:
    bitwise-xor-expression
    bitwise-ior-expression | bitwise-xor-expression

===========================================================
Logical AND Operator
===========================================================

  logical-and-expression:
    bitwise-ior-expression
    logical-and-expression && bitwise-ior-expression

===========================================================
Logical Exclusive OR Operator
===========================================================

  logical-xor-expression:
    logical-and-expression
    logical-xor-expression ^^ logical-and-expression

===========================================================
Logical Inclusive OR Operator
===========================================================

  logical-ior-expression:
    logical-xor-expression
    logical-ior-expression || logical-xor-expression

===========================================================
Conditional Operator
===========================================================

  conditional-expression:
    logical-ior-expression
    logical-ior-expression ? expression : conditional-expression

===========================================================
Assignment Operators
===========================================================

  assignment-expression:
    conditional-expression
    prefix-expression assignment-operator assignment-expression

  assignment-operator: one of
    = *= /= %= += -= <<= >>= &= ^= |= &&= ^^= ||=

===========================================================
Comma Operator
===========================================================

  expression:
    assignment-expression
    expression , assignment-expression

===============================================================================
Types
===============================================================================

  type:
    bare-type
    ( type )

  bare-type:
    <__block> { block-list(opt) }
    boolean-specifier
    <decltype> prefix-expression
    <enum> identifier
    <enum> identifier(opt) { enum-list }
    function-type-specifier function-args
    identifier
    <__label>
    numeric-specifier
    <__string>
    structure-specifier identifier
    structure-specifier identifier(opt) { structure-list(opt) }
    type storage-class
    type type-qualifier
    type *
    type [ expression ]
    <typename> identifier
    <void>

  block-list:
    type ; block-list(opt)

  boolean-specifier: one of
    <bool> <_Bool> <__boolsoft>

  enum-list:
    enum-member
    enum-member , enum-list(opt)

  function-type-specifier: one of
    <__asmfunc_t> <__func_t> <__lnspec_t> <__native_t> <__script_t>

  numeric-specifier:
    numeric-specifier-part numeric-specifier(opt)

  structure-specifier: one of
    <struct> <union>

  structure-list:
    type structure-name-list ; structure-list(opt)

  type-qualifier: one of
    <const> <restrict> <volatile>

  enum-member:
    identifier enum-initializer(opt)

  numeric-specifier-part: one of
    numeric-specifier-base numeric-specifier-sign numeric-specifier-size

  structure-name-list:
    identifier
    identifier , structure-name-list

  enum-initializer:
    = assignment-expression

  numeric-specifier-base: one of
    <char> <double> <__fixed> <float> <int> <__real>

  numeric-specifier-sign: one of
    <signed> <unsigned>

  numeric-specifier-size: one of
    <long> <short>

===============================================================================
Storage Classes
===============================================================================

  storage-class:
    store-type
    store-type ( expression )

  store-type: one of
    <static> <__staticregister> <__staticarray>
    <auto> <__autoregister> <__autoarray>
    <register> <__mapregister> <__worldregister> <__globalregister>
    <__maparray> <__worldarray> <__globalarray>

###############################################################################
EOF
###############################################################################

