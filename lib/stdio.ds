//-----------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Input/output.
//
//-----------------------------------------------------------------------------

#include <stdio.h>

#include <ctype.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


//----------------------------------------------------------------------------|
// Macros                                                                     |
//

//
// FPrintChar
//
#define FPrintChar(c,s) if(fputc((c), (s)) == EOF) return EOF else ((void)0)

//
// FPrintNum_Pre
//
#define FPrintNum_Pre() \
   char padc = (data.flags & FF_PAD0 && !data.prec) ? '0' : ' ', sign = 0; \
   \
   if(data.prec == -1) data.prec = 1;

//
// FPrintNum_End
//
#define FPrintNum_End() \
   /* If right-justified, pad width now. */ \
   if(!(data.flags & FF_LEFT)) \
   { \
      /* Specifically, pad it to max(len, prec). */ \
      int n = data.width - (len < data.prec ? data.prec : len); \
      \
      if(n > 0) for(; n--; ++ret) FPrintChar(padc, stream); \
   }; \
   \
   /* Print sign, if any. */ \
   if(sign) \
   { \
      FPrintChar(sign, stream); \
      ++ret; \
   }; \
   \
   /* Pad to precision and print number. */ \
   for(; len < data.prec; ++len) FPrintChar('0', stream); \
   if(fputs(base, stream) == EOF) return EOF; \
   \
   /* If left-justified, pad width now. */ \
   if(data.flags & FF_LEFT) \
   { \
      for(; len < data.width; ++len) FPrintChar(padc, stream); \
   }; \
   \
   /* Return number of characters written. */ \
   return len + ret;

//
// FPrintNumI
//
#define FPrintNumI(N,T,D) \
   if(i < 0) \
   { \
      sign = '-'; \
      i = -i; \
   } \
   else \
   { \
           if(data.flags & FF_SIGN) sign = '+'  \
      else if(data.flags & FF_PADS) sign = ' '; \
   }; \
   \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   T id; \
   \
   while(i) \
   { \
      id = D(i, 10); \
      *--base = (int)id.rem + '0'; \
      i = id.quot; \
   }; \
   \
   int len = s+(N) - base, ret = 0;

//
// FPrintNumO
//
#define FPrintNumO(N) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   \
   while(o) \
   { \
      *--base = ((int)o & 07) + '0'; \
      o >>= 3; \
   }; \
   \
   int len = s+(N) - base, ret = 0; \
   \
   /* Alternate format means increase precision just enough to have a leading 0. */ \
   if(data.flags & FF_ALTF) \
   { \
      if(len >= data.prec) data.prec = len+1; \
   };

//
// FPrintNumU
//
#define FPrintNumU(N,T,D) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   T ud; \
   \
   while(u) \
   { \
      ud = D(u, 10); \
      *--base = (int)ud.rem + '0'; \
      u = ud.quot; \
   }; \
   \
   int len = s+(N) - base, ret = 0;

//
// FPrintNumX
//
#define FPrintNumX(N) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   \
   __string hexchar = data.fmt == 'X' ? "0123456789ABCDEF" : "0123456789abcdef"; \
   \
   while(x) \
   { \
      *--base = hexchar[(int)x & 0xF]; \
      x >>= 4; \
   }; \
   \
   int len = s+(N) - base, ret = 0;

//
// FPrintNumX_End
//
#define FPrintNumX_End() \
   /* Alternate format means prefix with 0x/0X if non-zero. */ \
   if(data.flags & FF_ALTF && x) \
   { \
      FPrintChar(     '0', stream); \
      FPrintChar(data.fmt, stream); \
      ret = 2; \
   } \
   else \
      ret = 0;


//----------------------------------------------------------------------------|
// Types                                                                      |
//

//
// ErrorFlag
//
enum ErrorFlag
{
   EF_NOBUF = 0x0001,
};

//
// FormatFlag
//
enum FormatFlag
{
   FF_LEFT = 0x0001,
   FF_SIGN = 0x0002,
   FF_PADS = 0x0004,
   FF_ALTF = 0x0008,
   FF_PAD0 = 0x0010,
};

//
// FormatLength
//
enum FormatLength
{
   FL_NONE,
   FL_HH,
   FL_H,
   FL_L,
   FL_LL,
   FL_MAX,
   FL_SIZE,
   FL_DIFF,
};

//
// FormatData
//
struct FormatData
{
   unsigned     flags;
   int          width;
   int          prec;
   FormatLength len;
   char         fmt;
};


//----------------------------------------------------------------------------|
// Global Variables                                                           |
//

__extvar "C" static FILE[FOPEN_MAX] _Stream;


//----------------------------------------------------------------------------|
// Static Functions                                                           |
//

__asmfunc void PrintStart() @ __ocode(ACSP_START);
__asmfunc void PrintEnd() @ __ocode(ACSP_END);
__asmfunc void PrintEndLog() @ __ocode(ACSP_END_LOG);

__asmfunc void PrintChar(char) @ __ocode(ACSP_CHARACTER);
__asmfunc void PrintStatic(char const static *, int) @ __ocode(ACSP_STR_GBLARR);
__asmfunc void PrintString(__string) @ __ocode(ACSP_STR);

//
// FPrintI
//
__intfunc int FPrintI(FILE *stream, FormatData data, int i)
{
   FPrintNum_Pre();
   FPrintNumI(10, div_t, div);
   FPrintNum_End();
};

//
// FPrintIL
//
__intfunc int FPrintIL(FILE *stream, FormatData data, long i)
{
   FPrintNum_Pre();
   FPrintNumI(20, ldiv_t, ldiv);
   FPrintNum_End();
};

//
// FPrintO
//
__intfunc int FPrintO(FILE *stream, FormatData data, unsigned o)
{
   FPrintNum_Pre();
   FPrintNumO(11);
   FPrintNum_End();
};

//
// FPrintOL
//
__intfunc int FPrintOL(FILE *stream, FormatData data, unsigned long o)
{
   FPrintNum_Pre();
   FPrintNumO(22);
   FPrintNum_End();
};

//
// FPrintU
//
__intfunc int FPrintU(FILE *stream, FormatData data, unsigned u)
{
   FPrintNum_Pre();
   FPrintNumU(10, _Udiv_t, _Udiv);
   FPrintNum_End();
};

//
// FPrintUL
//
__intfunc int FPrintUL(FILE *stream, FormatData data, unsigned long u)
{
   FPrintNum_Pre();
   FPrintNumU(20, _UdivL_t, _UdivL);
   FPrintNum_End();
};

//
// FPrintX
//
__intfunc int FPrintX(FILE *stream, FormatData data, unsigned x)
{
   FPrintNum_Pre();
   FPrintNumX(8);
   FPrintNumX_End();
   FPrintNum_End();
};

//
// FPrintXL
//
__intfunc int FPrintXL(FILE *stream, FormatData data, unsigned long x)
{
   FPrintNum_Pre();
   FPrintNumX(16);
   FPrintNumX_End();
   FPrintNum_End();
};

//
// FPrintS
//
__intfunc int FPrintS(FILE *stream, FormatData data, char const *s)
{
   char const *itr;
   int len = 0;

   if(data.prec <= 0) data.prec = 0x7FFFFFFF;

   if(data.flags & FF_LEFT || !data.width)
   {
      // Write string.
      for(itr = s; *itr && len < data.prec; ++itr, ++len)
         FPrintChar(*itr, stream);

      // Pad field.
      for(; len < data.width; ++len)
         FPrintChar(' ', stream);
   }
   else
   {
      // Count string length.
      for(itr = s; *itr && len < data.prec; ++itr, ++len);

      // Pad field.
      for(; len < data.width; ++len)
         FPrintChar(' ', stream);

      // Write string.
      for(len = 0, itr = s; *itr && len < data.prec; ++itr, ++len)
         FPrintChar(*itr, stream);

      // Pad length.
      if(len < data.width)
         len = data.width;
   };

   return len;
};


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

//=========================================================
// Operations on files.
//

//
// remove
//
__extfunc "C" int remove(char const *filename)
{
   return EOF;
};

//
// rename
//
__extfunc "C" int rename(char const *oldname, char const *newname)
{
   return EOF;
};

//
// tmpfile
//
__extfunc "C" FILE *tmpfile()
{
   return NULL;
};

//
// tmpnam
//
__extfunc "C" char *tmpnam(char *s)
{
   return NULL;
};

//=========================================================
// File access functions.
//

//
// fclose
//
__extfunc "C" int fclose(FILE *stream)
{
   return EOF;
};

//
// fflush
//
__extfunc "C" int fflush(FILE *stream)
{
   return EOF;
};

//
// fopen
//
__extfunc "C" FILE *fopen(char const *restrict filename, char const *restrict mode)
{
   return NULL;
};

//
// freopen
//
__extfunc "C" FILE *freopen(char const *restrict filename, char const *restrict mode,
                            FILE *restrict stream)
{
   return NULL;
};

//
// setbuf
//
__extfunc "C" void setbuf(FILE *restrict stream, char *restrict buf)
{
   if(buf)
      setvbuf(stream, buf, _IOFBF, BUFSIZ)
   else
      setvbuf(stream, NULL, _IONBF, 0);
};

//
// setvbuf
//
__extfunc "C" int setvbuf(FILE *restrict stream, char *restrict buf, int mode, size_t size)
{
   return EOF;
};

//=========================================================
// Formatted input/output functions.
//

//
// fprintf
//
__extfunc "C" int fprintf(FILE *restrict stream, char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vfprintf(stream, format, ap);
   va_end(ap);

   return ret;
};

//
// fscanf
//
__extfunc "C" int fscanf(FILE *restrict stream, char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vfscanf(stream, format, ap);
   va_end(ap);

   return ret;
};

//
// printf
//
__extfunc "C" int printf(char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vfprintf(stdout, format, ap);
   va_end(ap);

   return ret;
};

//
// scanf
//
__extfunc "C" int scanf(char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vfscanf(stdin, format, ap);
   va_end(ap);

   return ret;
};

//
// snprintf
//
__extfunc "C" int snprintf(char *restrict s, size_t n, char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vsnprintf(s, n, format, ap);
   va_end(ap);

   return ret;
};

//
// sprintf
//
__extfunc "C" int sprintf(char *restrict s, char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vsprintf(s, format, ap);
   va_end(ap);

   return ret;
};

//
// sscanf
//
__extfunc "C" int sscanf(char const *restrict s, char const *restrict format, ...)
{
   int ret;
   va_list ap;

   va_start(ap, format);
   ret = vsscanf(s, format, ap);
   va_end(ap);

   return ret;
};

//
// vfprintf
//
__extfunc "C" int vfprintf(FILE *restrict stream, char const *restrict format, va_list arg)
{
   int ret = 0, res;

   for(char c; (c = *format++);)
   {
      if(c != '%')
      {
         if(fputc(c, stream) == EOF) return EOF;
         ++ret;
         continue;
      };

      FormatData data;

      // Read flags, if any.
      for(data.flags = 0; (c = *format); ++format)
      {
         switch(c)
         {
         case '-': data.flags |= FF_LEFT; continue;
         case '+': data.flags |= FF_SIGN; continue;
         case ' ': data.flags |= FF_PADS; continue;
         case '#': data.flags |= FF_ALTF; continue;
         case '0': data.flags |= FF_PAD0; continue;
         };

         break;
      };

      // Read field width, if any.
      if(*format == '*')
      {
         ++format;
         if((data.width = va_arg(arg, int)) < 0)
            data.width = -data.width, data.flags |= FF_LEFT;
      }
      else for(data.width = 0; isdigit((c = *format)); ++format)
         data.width = (data.width * 10) + (c - '0');

      // Read precision, if any.
      if(*format == '.')
      {
         if(*++format == '*')
         {
            ++format;
            if((data.prec = va_arg(arg, int)) < 0)
               data.prec = -1;
         }
         else for(data.prec = 0; isdigit((c = *format)); ++format)
            data.prec = (data.prec * 10) + (c - '0');
      }
      else
         data.prec = -1;

      // Read length modifier, if any.
      switch(*format)
      {
      case 'h': data.len = ((*++format == 'h') ? (++format, (FormatLength)FL_HH) : (FormatLength)FL_H); break;
      case 'l': data.len = *++format == 'l' ? ++format, FL_LL : FL_L; break;
      case 'j': data.len = FL_MAX;  ++format; break;
      case 'z': data.len = FL_SIZE; ++format; break;
      case 't': data.len = FL_DIFF; ++format; break;
      case 'L': data.len = FL_L;    ++format; break;
      default:  data.len = FL_NONE;           break;
      };

      // Read conversion specifier.
      data.fmt = *format++;

      // Perform formatted print.
      switch(data.fmt)
      {
      case 'd':
      case 'i':
         switch(data.len)
         {
         case FL_NONE: res = FPrintI (stream, data, va_arg(arg, int));         break;
         case FL_HH:   res = FPrintI (stream, data, va_arg(arg, short short)); break;
         case FL_H:    res = FPrintI (stream, data, va_arg(arg, short));       break;
         case FL_L:    res = FPrintIL(stream, data, va_arg(arg, long));        break;
         case FL_LL:   res = FPrintIL(stream, data, va_arg(arg, long long));   break;
         case FL_MAX:  res = FPrintIL(stream, data, va_arg(arg, intmax_t));    break;
         case FL_SIZE: res = FPrintI (stream, data, va_arg(arg, size_t));      break;
         case FL_DIFF: res = FPrintI (stream, data, va_arg(arg, ptrdiff_t));   break;
         };

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'o':
         switch(data.len)
         {
         case FL_NONE: res = FPrintO (stream, data, va_arg(arg, unsigned int));         break;
         case FL_HH:   res = FPrintO (stream, data, va_arg(arg, unsigned short short)); break;
         case FL_H:    res = FPrintO (stream, data, va_arg(arg, unsigned short));       break;
         case FL_L:    res = FPrintOL(stream, data, va_arg(arg, unsigned long));        break;
         case FL_LL:   res = FPrintOL(stream, data, va_arg(arg, unsigned long long));   break;
         case FL_MAX:  res = FPrintOL(stream, data, va_arg(arg, intmax_t));             break;
         case FL_SIZE: res = FPrintO (stream, data, va_arg(arg, size_t));               break;
         case FL_DIFF: res = FPrintO (stream, data, va_arg(arg, ptrdiff_t));            break;
         };

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'u':
         switch(data.len)
         {
         case FL_NONE: res = FPrintU (stream, data, va_arg(arg, unsigned int));         break;
         case FL_HH:   res = FPrintU (stream, data, va_arg(arg, unsigned short short)); break;
         case FL_H:    res = FPrintU (stream, data, va_arg(arg, unsigned short));       break;
         case FL_L:    res = FPrintUL(stream, data, va_arg(arg, unsigned long));        break;
         case FL_LL:   res = FPrintUL(stream, data, va_arg(arg, unsigned long long));   break;
         case FL_MAX:  res = FPrintUL(stream, data, va_arg(arg, intmax_t));             break;
         case FL_SIZE: res = FPrintU (stream, data, va_arg(arg, size_t));               break;
         case FL_DIFF: res = FPrintU (stream, data, va_arg(arg, ptrdiff_t));            break;
         };

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'x':
      case 'X':
         switch(data.len)
         {
         case FL_NONE: res = FPrintX (stream, data, va_arg(arg, unsigned int));         break;
         case FL_HH:   res = FPrintX (stream, data, va_arg(arg, unsigned short short)); break;
         case FL_H:    res = FPrintX (stream, data, va_arg(arg, unsigned short));       break;
         case FL_L:    res = FPrintXL(stream, data, va_arg(arg, unsigned long));        break;
         case FL_LL:   res = FPrintXL(stream, data, va_arg(arg, unsigned long long));   break;
         case FL_MAX:  res = FPrintXL(stream, data, va_arg(arg, intmax_t));             break;
         case FL_SIZE: res = FPrintX (stream, data, va_arg(arg, size_t));               break;
         case FL_DIFF: res = FPrintX (stream, data, va_arg(arg, ptrdiff_t));            break;
         };

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'c':
         if(fputc((char)va_arg(arg, int), stream) == EOF) return EOF;
         ret += res;
         break;

      case 's':
         res = FPrintS(stream, data, va_arg(arg, char *));

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'p':
         res = FPrintXL(stream, data, (unsigned long)va_arg(arg, void *));

         if(res == EOF) return EOF;
         ret += res;
         break;

      case 'n':
         switch(data.len)
         {
         case FL_NONE: *va_arg(arg, int *)         = ret; break;
         case FL_HH:   *va_arg(arg, short short *) = ret; break;
         case FL_H:    *va_arg(arg, short *)       = ret; break;
         case FL_L:    *va_arg(arg, long *)        = ret; break;
         case FL_LL:   *va_arg(arg, long long *)   = ret; break;
         case FL_MAX:  *va_arg(arg, intmax_t *)    = ret; break;
         case FL_SIZE: *va_arg(arg, size_t *)      = ret; break;
         case FL_DIFF: *va_arg(arg, ptrdiff_t *)   = ret; break;
         };

         break;

      case '%':
         if(fputc('%', stream) == EOF) return EOF;
         ++ret;
         break;

      default:
         return EOF;
      };
   };

   return ret;
};

//
// vfscanf
//
__extfunc "C" int vfscanf(FILE *restrict stream, char const *restrict format, va_list arg)
{
   return EOF;
};

//
// vprintf
//
__extfunc "C" int vprintf(char const *restrict format, va_list arg)
{
   return vfprintf(stdout, format, arg);
};

//
// vscanf
//
__extfunc "C" int vscanf(char const *restrict format, va_list arg)
{
   return vfscanf(stdin, format, arg);
};

//
// vsnprintf
//
__extfunc "C" int vsnprintf(char *restrict s, size_t n, char const *restrict format, va_list arg)
{
   return EOF;
};

//
// vsprintf
//
__extfunc "C" int vsprintf(char *restrict s, char const *restrict format, va_list arg)
{
   return EOF;
};

//
// vsscanf
//
__extfunc "C" int vsscanf(char const *restrict s, char const *restrict format, va_list arg)
{
   return EOF;
};

//=========================================================
// Character input/output functions.
//

//
// fgetc
//
__extfunc "C" int fgetc(FILE *stream)
{
   return EOF;
};

//
// fgets
//
__extfunc "C" char *fgets(char *restrict s, size_t n, FILE *restrict stream)
{
   return NULL;
};

//
// fputc
//
__extfunc "C" int fputc(int c, FILE *_stream)
{
   register FILE __near *stream = __store_cast<FILE __near *>(_stream);

   if(c == '\n')
   {
      stream->buf[stream->bufpos] = '\0';

      if(stream == stdout)
      {
         PrintStart();
         PrintStatic(stream->buf, @*stream->buf);
         PrintEnd();
      };

      PrintStart();
      PrintStatic(stream->buf, @*stream->buf);
      PrintEndLog();

      stream->bufpos = 0;

      return c;
   };

   if(stream->bufpos == (BUFSIZ-1))
      return stream->flags |= EF_NOBUF, EOF;

   stream->buf[stream->bufpos++] = c;

   return c;
};

//
// fputs
//
__extfunc "C" int fputs(char const *restrict s, FILE *restrict stream)
{
   int ret = 0;

   for(char c; (c = *s++); ++ret) if(fputc(c, stream) == EOF) return EOF;

   return ret;
};

//
// getc
//
__extfunc "C" int getc(FILE *stream)
{
   return fgetc(stream);
};

//
// getchar
//
__extfunc "C" int getchar()
{
   return fgetc(stdin);
};

//
// gets
//
__extfunc "C" char *gets(char *s)
{
   return NULL;
};

//
// putc
//
__extfunc "C" int putc(int c, FILE *stream)
{
   return fputc(c, stream);
};

//
// putchar
//
__extfunc "C" int putchar(int c)
{
   return fputc(c, stdout);
};

//
// puts
//
__extfunc "C" int puts(char const *s)
{
   return fputs(s, stdout);
};

//
// ungetc
//
__extfunc "C" int ungetc(int c, FILE *stream)
{
   return EOF;
};

//=========================================================
// Direct input/output functions.
//

//
// fread
//
__extfunc "C" size_t fread(void *restrict ptr, size_t size, size_t nmemb,
                           FILE *restrict stream)
{
   return 0;
};

//
// fwrite
//
__extfunc "C" size_t fwrite(void const *restrict ptr, size_t size, size_t nmemb,
                            FILE *restrict stream)
{
   return 0;
};

//=========================================================
// File positioning functions.
//

//
// fgetpos
//
__extfunc "C" int fgetpos(FILE *restrict stream, fpos_t *restrict pos)
{
   return EOF;
};

//
// fseek
//
__extfunc "C" int fseek(FILE *stream, long int offset, int whence)
{
   return EOF;
};

//
// fsetpos
//
__extfunc "C" int fsetpos(FILE *restrict stream, fpos_t const *restrict pos)
{
   return EOF;
};

//
// ftell
//
__extfunc "C" long int ftell(FILE *stream)
{
   return -1L;
};

//
// rewind
//
__extfunc "C" void rewind(FILE *stream)
{
};

//=========================================================
// Error-handling functions,
//

//
// clearerr
//
__extfunc "C" void clearerr(FILE *stream)
{
   __store_cast<FILE __near *>(stream)->flags = 0;
};

//
// feof
//
__extfunc "C" int feof(FILE *stream)
{
   return true;
};

//
// ferror
//
__extfunc "C" int ferror(FILE *stream)
{
   return !!__store_cast<FILE __near *>(stream)->flags;
};

//
// perror
//
__extfunc "C" void perror(char const *s)
{
};

//=========================================================
// Implementation extensions
//

#define PrintNum_Pre() \
   if(width < 0) {width = -width; flags |= FF_LEFT;}; \
   \
   if(prec < 0) prec = 0; \
   \
   char padc = (flags & FF_PAD0 && !prec) ? '0' : ' '; \
   \
   if(prec < 1) prec = 1;

#define PrintNum_End() \
   /* If right-justified, pad width now. */ \
   if(!(flags & FF_LEFT)) \
   { \
      /* Specifically, pad it to max(len, prec). */ \
      int i = width - (len < prec ? prec : len); \
      \
      if(i > 0) for(; i--; ++ret) PrintChar(padc); \
   }; \
   \
   /* Pad to precision and print number. */ \
   for(; len < prec; ++len) PrintChar('0'); \
   PrintStatic(base, @*base); \
   \
   /* If left-justified, pad width now. */ \
   if(flags & FF_LEFT) for(; len < width; ++len) PrintChar(padc); \
   \
   /* Return number of characters written. */ \
   return len + ret;

#define PrintNumO(N) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   \
   while(o) \
   { \
      *--base = ((int)o & 07) + '0'; \
      o >>= 3; \
   }; \
   \
   int len = s+(N) - base, ret = 0; \
   \
   /* Alternate format means increase precision just enough to have a leading 0. */ \
   if(flags & FF_ALTF) \
   { \
      if(len >= prec) prec = len+1; \
   };

//
// _Print_o
//
__extfunc "C" int _Print_l(int flags, int width, int prec, char fmt, unsigned o)
{
   PrintNum_Pre();

   PrintNumO(11);

   PrintNum_End();
};

//
// _Print_lo
//
__extfunc "C" int _Print_lo(int flags, int width, int prec, char fmt, unsigned long o)
{
   PrintNum_Pre();

   PrintNumO(22);

   PrintNum_End();
};

//
// _Print_s
//
__extfunc "C" int _Print_s(int flags, int width, int prec, char fmt, char const __far *s)
{
   char const __far *itr;
   int len = 0;

   if(prec <= 0) prec = 0x7FFFFFFF;

   if(flags & FF_LEFT || !width)
   {
      // Write string.
      for(itr = s; *itr && len < prec; ++itr, ++len)
         PrintChar(*itr);

      // Pad field.
      for(; len < width; ++len)
         PrintChar(' ');
   }
   else
   {
      // Count string length.
      for(itr = s; *itr && len < prec; ++itr, ++len);

      // Pad field.
      for(; len < width; ++len)
         PrintChar(' ');

      // Write string.
      for(len = 0, itr = s; *itr && len < prec; ++itr, ++len)
         PrintChar(*itr);

      // Pad length.
      if(len < width)
         len = width;
   };

   return len;
};

#define PrintNumU(N,T,D) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   T ud; \
   \
   while(u) \
   { \
      ud = D(u, 10); \
      u = ud.quot; \
      *--base = (int)ud.rem + '0'; \
   }; \
   \
   int len = s+(N) - base, ret = 0;

//
// _Print_u
//
__extfunc "C" int _Print_u(int flags, int width, int prec, char fmt, unsigned u)
{
   PrintNum_Pre();

   PrintNumU(10, _Udiv_t, _Udiv);

   PrintNum_End();
};

//
// _Print_lu
//
__extfunc "C" int _Print_lu(int flags, int width, int prec, char fmt, unsigned long u)
{
   PrintNum_Pre();

   PrintNumU(20, _UdivL_t, _UdivL);

   PrintNum_End();
};

#define HEXCHARL "0123456789abcdef"
#define HEXCHARU "0123456789ABCDEF"

#define PrintNumX(N) \
   static char[(N)+1] s; \
   \
   char __near *base = s+(N); \
   \
   __string hexchar = fmt == 'X' ? HEXCHARU : HEXCHARL; \
   \
   while(x) \
   { \
      *--base = hexchar[(int)x & 0xF]; \
      x >>= 4; \
   }; \
   \
   int len = s+(N) - base, ret = 0; \
   \
   /* Alternate format means prefix with 0x/0X if non-zero. */ \
   if(flags & FF_ALTF && x) \
   { \
      PrintChar('0'); \
      PrintChar(fmt); \
      ret = 2; \
   } \
   else \
      ret = 0;

//
// _Print_x
//
__extfunc "C" int _Print_x(int flags, int width, int prec, char fmt, unsigned x)
{
   PrintNum_Pre();

   PrintNumX(8);

   PrintNum_End();
};

//
// _Print_lx
//
__extfunc "C" int _Print_lx(int flags, int width, int prec, char fmt, unsigned long x)
{
   PrintNum_Pre();

   PrintNumX(16);

   PrintNum_End();
};

// EOF

