//-----------------------------------------------------------------------------
//
// Copyright(C) 2011, 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// String handling.
//
//-----------------------------------------------------------------------------

#include "string.dh"


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

//===================================================================
// Copying functions.
//

//
// memcpy
//
__extfunc memcpy(void *restrict s1, void const *restrict s2, size_t n) -> void *
{
   __variable __autoreg char const *end = (char const *)s2 + n;

   __variable __autoreg char       *i1 = (char       *)s1;
   __variable __autoreg char const *i2 = (char const *)s2;

   while (i2 != end)
   {
      *i1++ = *i2++;
   };

   return s1;
};

//
// memmove
//
__extfunc memmove(void *s1, void const *s2, size_t n) -> void *
{
   if ((void const *)s1 < s2)
   {
      __variable __autoreg char const *end = (char const *)s2 + n;

      __variable __autoreg char       *i1 = (char       *)s1;
      __variable __autoreg char const *i2 = (char const *)s2;

      while (i2 != end)
      {
         *i1++ = *i2++;
      };
   }
   else
   {
      __variable __autoreg char const *end = (char const *)s2;

      __variable __autoreg char       *i1 = (char       *)s1 + n;
      __variable __autoreg char const *i2 = (char const *)s2 + n;

      while (i2 != end)
      {
         *--i1 = *--i2;
      };
   };

   return s1;
};

//
// strcpy
//
__extfunc strcpy(char *restrict s1, char const *restrict s2) -> char *
{
   __variable __autoreg char *i = s1;

   while (*s2) {*i++ = *s2++;};

   *i = 0;

   return s1;
};

//
// strncpy
//
__extfunc strncpy
(char *restrict s1, char const *restrict s2, size_t n) -> char *
{
   __variable __autoreg char *i = s1;
   __variable __autoreg char *end = i + n;

   while (*s2 && i != end) {*i++ = *s2++;};

   *i = 0;

   return s1;
};

//===================================================================
// Concatenation functions.
//

//
// strcat
//
__extfunc strcat(char *restrict s1, char const *restrict s2) -> char *
{
   __variable __autoreg char *i = s1;

   while (*i) {++i;};

   while (*s2)
   {
      *i++ = *s2++;
   };

   *i = 0;

   return s1;
};

//
// strncat
//
__extfunc strncat
(char *restrict s1, char const *restrict s2, size_t n) -> char *
{
   __variable __autoreg char *i = s1;

   while (*i) {++i;};

   __variable __autoreg char *end = i + n;

   while (*s2 && i != end)
   {
      *i++ = *s2++;
   };

   *i = 0;

   return s1;
};

//===================================================================
// Comparison functions.
//

//
// memcmp
//
__extfunc memcmp(void const *s1, void const *s2, size_t n) -> int
{
   __variable __autoreg char const *end = (char const *)s1 + n;

   __variable __autoreg char const *i1 = (char const *)s1;
   __variable __autoreg char const *i2 = (char const *)s2;

   while (i1 != end)
   {
      if (*i1 != *i2)
      {
         return *i1 - *i2;
      };

      ++i1; ++i2;
   };

   return 0;
};

//
// strcmp
//
__extfunc strcmp(char const *s1, char const *s2) -> int
{
   while (*s1 && *s2)
   {
      if (*s1 != *s2)
      {
         return *s1 - *s2;
      };

      ++s1; ++s2;
   };

   return *s1 - *s2;
};

//
// strcoll
//
//__extfunc strcoll(char const *s1, char const *s2) -> int

//
// strncmp
//
__extfunc strncmp(char const *s1, char const *s2, size_t n) -> int
{
   __variable __autoreg char const *end = s1 + n;

   while (*s1 && *s2 && s1 != end)
   {
      if (*s1 != *s2)
      {
         return *s1 - *s2;
      };

      ++s1; ++s2;
   };

   return *s1 - *s2;
};

//
// strxfrm
//
//__extfunc strxfrm(char *restrict s1, char const *restrict s2, size_t n)

//===================================================================
// Search functions.
//

//
// memchr
//
__extfunc memchr(void const *s, int c, size_t n) -> void *
{
   __variable __autoreg char const *end = (char const *)s + n;

   for (__variable __autoreg char const *i = (char const *)s; i != end; ++i)
   {
      if (*i == (char)c)
      {
         return (void *)i;
      };
   };

   return NULL;
};

//
// strchr
//
__extfunc strchr(char const *s, int c) -> char *
{
   while (true)
   {
      if (*s == (char)c)
      {
         return (char *)s;
      };

      if (!*s++) break;
   };

   return NULL;
};

//
// strcspn
//
__extfunc strcspn(char const *s1, char const *s2) -> size_t
{
   __variable __autoreg char const *i = s1;

   while (*i && strchr(s2, *i)) {++i;};

   return i - s1;
};

//
// strpbrk
//
__extfunc strpbrk(char const *s1, char const *s2) -> char *
{
   while (*s1)
   {
      if (strchr(s2, *s1))
      {
         return (char *)s1;
      };

      ++s1;
   };

   return NULL;
};

//
// strrchr
//
__extfunc strrchr(char const *s, int c) -> char *
{
   __variable __autoreg char const *found = NULL;

   while (true)
   {
      if (*s == (char)c)
      {
         found = s;
      };

      if (!*s++) break;
   };

   return (char *)found;
};

//
// strspn
//
__extfunc strspn(char const *s1, char const *s2) -> size_t
{
   __variable __autoreg size_t n = 0;

   while (*s1 && strchr(s2, *s1++)) {++n;};

   return n;
};

//
// strstr
//
__extfunc strstr(char const *s1, char const *s2) -> char *
{
   if (!*s2) {return (char *)s1;};

   while (s1 = strchr(s1, *s2))
   {
      __variable __autoreg char const *i1 = s1;
      __variable __autoreg char const *i2 = s2;

      while (*i1 && *i2)
      {
         if (*i1 != *i2) break;

         if (!*i2) return (char *)s1;

         ++i1; ++i2;
      };

      ++s1;
   };

   return NULL;
};

//
// strtok
//
__extfunc strtok(char *restrict s1, char const *restrict s2) -> char *
{
   __variable static char *tok;

   __variable __autoreg char *tmp;

   if (s1) {tok = s1;};

   if (!tok) {return NULL;};

   // Skip any separators.
   tok += strcspn(tok, s2);

   // If tok points to the null-terminator, there are no more tokens.
   if (!*tok) {return NULL;};

   // Store the pointer to the token in a temporary.
   tmp = tok;

   // Look for the end of the token.
   tok = strpbrk(tok, s2);

   // If no end is found, then we're at the last token.
   if (!tok) {return tmp;};

   // Null-terminate the token and point to the start of the next.
   *tok++ = 0;

   return tmp;
};

//===================================================================
// Miscellaneous functions.
//

//
// memset
//
__extfunc memset(void *s, int c, size_t n) -> void *
{
   __variable __autoreg char *end = (char *)s + n;

   for (__variable __autoreg char *i = (char *)s; i != end; ++i)
   {
      *i = (char)c;
   };

   return s;
};

//
// strerror
//
__extfunc strerror(int errnum) -> char *
{
   __variable static char c = 0;

   return &c; // :v
};

//
// strlen
//
__extfunc strlen(char const *s) -> size_t
{
   __variable __autoreg size_t n = 0;

   while (*s++) {++n;};

   return n;
};

// EOF

