//-----------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Definitions compatible with acc builtins.
//
//-----------------------------------------------------------------------------

#ifndef __HEADER__ZBUILTIN_ACS__
#define __HEADER__ZBUILTIN_ACS__


//----------------------------------------------------------------------------|
// Macros                                                                     |
//

//
// function
// script
//
#ifdef __LANG_DS__
#define function __function
#define script __script
#endif

//
// __asmfunc
//
#ifdef __LANG_DS__
#define __asmfunc __asmfunc
#define __asmcode(CODE) @ __ocode(CODE)
#define __asmcode_imm(CODE) @ __ocode(CODE, CODE##_IMM)
#else
#define __asmfunc
#define __asmcode(CODE) __attribute__((__asmfunc__(CODE)))
#define __asmcode_imm(CODE) __attribute__((__asmfunc__(CODE, CODE##_IMM)))
#endif

//
// _A
//
#ifdef __LANG_C__
#define _A(N)
#else
#define _A(N) = (N)
#endif


//----------------------------------------------------------------------------|
// Types                                                                      |
//

typedef _Accum fixed;
typedef __string str;


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

// Actors
__asmfunc int      ActivatorTID(void) __asmcode(ACSE_THING_GET_MTAG);
__asmfunc _Bool    CheckActorCeilingTexture(int, __string) __asmcode(ACSE_MTAG_CHK_TEXTURE_CEILING);
__asmfunc _Bool    CheckActorFloorTexture(int, __string) __asmcode(ACSE_MTAG_CHK_TEXTURE_FLOOR);
__asmfunc int      ClassifyActor(int _A(0)) __asmcode(ACSE_MTAG_GET_CLASSIFICATION);
__asmfunc _Accum   GetActorAngle(int _A(0)) __asmcode(ACSE_MTAG_GET_ANGLE);
__asmfunc _Accum   GetActorCeilingZ(int _A(0)) __asmcode(ACSE_MTAG_GET_CEILINGZ);
__asmfunc _Accum   GetActorFloorZ(int _A(0)) __asmcode(ACSE_MTAG_GET_FLOORZ);
__asmfunc int      GetActorLightLevel(int _A(0)) __asmcode(ACSE_MTAG_GET_LIGHTLEVEL);
__asmfunc _Accum   GetActorPitch(int _A(0)) __asmcode(ACSE_MTAG_GET_PITCH);
__asmfunc int      GetActorProperty(int, int) __asmcode(ACSE_MTAG_GET);
__asmfunc _Accum   GetActorPropertyFixed(int, int) __asmcode(ACSE_MTAG_GET);
__asmfunc __string GetActorPropertyString(int, int) __asmcode(ACSE_MTAG_GET);
__asmfunc _Accum   GetActorX(int _A(0)) __asmcode(ACSE_MTAG_GET_X);
__asmfunc _Accum   GetActorY(int _A(0)) __asmcode(ACSE_MTAG_GET_Y);
__asmfunc _Accum   GetActorZ(int _A(0)) __asmcode(ACSE_MTAG_GET_Z);
__asmfunc int      MorphActor(int _A(0), __string _A(""), __string _A(""), int _A(0), int _A(0), __string _A(""), __string _A("")) __asmcode(ACSE_MTAG_MORPH);
__asmfunc void     SetActorAngle(int, _Accum) __asmcode(ACSE_MTAG_SET_ANGLE);
__asmfunc void     SetActorPitch(int, _Accum) __asmcode(ACSE_MTAG_SET_PITCH);
__asmfunc _Bool    SetActorPosition(int, _Accum, _Accum, _Accum, _Bool _A(0)) __asmcode(ACSE_MTAG_SET_XYZ);
__asmfunc void     SetActorProperty(int, int, int) __asmcode(ACSE_MTAG_SET);
__asmfunc void     SetActorPropertyFixed(int, int, _Accum) __asmcode(ACSE_MTAG_SET);
__asmfunc void     SetActorPropertyString(int, int, __string) __asmcode(ACSE_MTAG_SET);
__asmfunc int      SetActorState(int, __string, _Bool _A(0)) __asmcode(ACSE_MTAG_SET_STATE);
__asmfunc void     SetCameraToTexture(int, __string, int) __asmcode(ACSE_MTAG_SET_CAMERATEXTURE);
__asmfunc void     SetMarineSprite(int, __string) __asmcode(ACSE_MTAG_SET_MARINESPRITE);
__asmfunc void     SetMarineWeapon(int, int) __asmcode(ACSE_MTAG_SET_MARINEWEAPON);
__asmfunc void     SetThingSpecial(int _A(0), int _A(0), int _A(0), int _A(0), int _A(0), int _A(0), int _A(0)) __asmcode(ACSE_MTAG_SET_SPECIAL);
__asmfunc int      Thing_Damage2(int, int, __string) __asmcode(ACSE_MTAG_DAMAGE);
__asmfunc int      UnMorphActor(int _A(0), _Bool _A(0)) __asmcode(ACSE_MTAG_UNMORPH);

// Display
__asmfunc void     CancelFade(void) __asmcode(ACSE_SCREEN_FADE_STOP);
__asmfunc void     FadeRange(int, int, int, _Accum, int, int, int, _Accum, _Accum) __asmcode(ACSE_SCREEN_FADE_RANGE);
__asmfunc void     FadeTo(int, int, int, _Accum, _Accum) __asmcode(ACSE_SCREEN_FADE_START);
__asmfunc int      GetScreenHeight(void) __asmcode(ACSE_SCREEN_GET_HEIGHT);
__asmfunc int      GetScreenWidth(void) __asmcode(ACSE_SCREEN_GET_WIDTH);
__asmfunc void     SetFont(__string) __asmcode_imm(ACSP_SET_FONT);
__asmfunc void     SetHudSize(int, int, int _A(0)) __asmcode(ACSE_SCREEN_SET_HUDSIZE);
__asmfunc void     SetMugShotState(__string) __asmcode(ACSE_THING_SET_MUGSHOT);

// Inventory
__asmfunc int      CheckActorInventory(int, __string) __asmcode(ACSE_MTAG_GET_INVENTORY);
__asmfunc int      CheckInventory(__string) __asmcode_imm(ACSE_THING_GET_INVENTORY);
__asmfunc _Bool    CheckWeapon(__string) __asmcode(ACSE_THING_CHK_WEAPON);
__asmfunc void     ClearActorInventory(int _A(0)) __asmcode(ACSE_MTAG_CLR_INVENTORY);
__asmfunc void     ClearInventory(void) __asmcode(ACSE_THING_CLR_INVENTORY);
__asmfunc int      GetAmmoCapacity(__string) __asmcode(ACSE_THING_GET_AMMOCAP);
__asmfunc void     GiveActorInventory(int, __string, int) __asmcode(ACSE_MTAG_ADD_INVENTORY);
__asmfunc void     GiveInventory(__string, int) __asmcode_imm(ACSE_THING_ADD_INVENTORY);
__asmfunc void     SetAmmoCapacity(__string, int) __asmcode(ACSE_THING_SET_AMMOCAP);
__asmfunc _Bool    SetWeapon(__string) __asmcode(ACSE_THING_SET_WEAPON);
__asmfunc void     TakeActorInventory(int, __string, int) __asmcode(ACSE_MTAG_SUB_INVENTORY);
__asmfunc void     TakeInventory(__string, int) __asmcode_imm(ACSE_THING_SUB_INVENTORY);
__asmfunc int      UseActorInventory(int, __string) __asmcode(ACSE_MTAG_USEINVENTORY);
__asmfunc _Bool    UseInventory(__string) __asmcode(ACSE_THING_USEINVENTORY);

// Level/Game
__asmfunc void     ChangeLevel(__string, int _A(0), int _A(0), int _A(-1)) __asmcode(ACSE_GAME_SET_LEVEL);
__asmfunc void     ChangeSky(__string, __string) __asmcode(ACSE_GAME_SET_SKY);
__asmfunc int      GameSkill(void) __asmcode(ACS_GAME_GET_SKILL);
__asmfunc int      GameType(void) __asmcode(ACS_GAME_GET_TYPE);
__asmfunc int      GetCVar(__string) __asmcode(ACSE_GAME_GET_CVAR);
__asmfunc _Accum   GetCVarFixed(__string) __asmcode(ACSE_GAME_GET_CVAR);
__asmfunc __string GetCVarString(__string) __asmcode(ACSE_GAME_GET_CVAR);
__asmfunc int      GetLevelInfo(int) __asmcode(ACSE_GAME_GET_LEVELINFO);
__asmfunc int      PlayerCount(void) __asmcode(ACS_GAME_GET_PLAYERCOUNT);
__asmfunc void     ReplaceTextures(__string, __string, int _A(0)) __asmcode(ACSE_GAME_REPLACETEXTURES);
__asmfunc void     SetAirControl(_Accum) __asmcode_imm(ACSE_GAME_SET_AIRCONTROL);
__asmfunc void     SetGravity(_Accum) __asmcode_imm(ACSE_GAME_SET_GRAVITY);
__asmfunc int      ThingCount(int _A(0), int _A(0)) __asmcode_imm(ACS_GAME_GET_THINGCOUNT_SID);
__asmfunc int      ThingCountName(__string, int _A(0)) __asmcode(ACSE_GAME_GET_THINGCOUNT_STR);
__asmfunc int      Timer(void) __asmcode(ACS_GAME_GET_TIME);

// Lines
__asmfunc void     ClearLineSpecial(void) __asmcode(ACS_LINE_CLR_SPECIAL);
__asmfunc int      GetLineRowOffset(void) __asmcode(ACSE_LINE_GET_OFFSETY);
__asmfunc void     SetLineBlocking(int, int _A(0)) __asmcode(ACS_LTAG_SET_BLOCK);
__asmfunc int      LineSide(void) __asmcode(ACS_LINE_GET_SIDE);
__asmfunc void     SetLineMonsterBlocking(int, int _A(0)) __asmcode(ACSE_LTAG_SET_BLOCKMONSTER);
__asmfunc void     SetLineSpecial(int, int _A(0), int _A(0), int _A(0), int _A(0), int _A(0), int _A(0)) __asmcode(ACS_LTAG_SET_SPECIAL);
__asmfunc void     SetLineTexture(int, int, int, __string) __asmcode(ACS_LTAG_SET_TEXTURE);

// Math
__asmfunc _Accum   Cos(_Accum) __asmcode(TRIG_COS_X);
__asmfunc _Accum   FixedDiv(_Accum, _Accum) __asmcode(DIV_STK_X);
__asmfunc _Accum   FixedMul(_Accum, _Accum) __asmcode(MUL_STK_X);
__asmfunc int      Random(int, int) __asmcode_imm(ACS_MISC_RANDOM);
__asmfunc _Accum   RandomFixed(_Accum, _Accum) __asmcode_imm(ACS_MISC_RANDOM);
__asmfunc _Accum   Sin(_Accum) __asmcode(TRIG_SIN_X);
__asmfunc _Accum   VectorAngle(_Accum, _Accum) __asmcode(ACSE_TRIG_VECTORANGLE);

// Miscellaneous
__asmfunc void     CreateTranslationStart(int transnumber) __asmcode(ACSE_TRANSLATION_START);
__asmfunc void     CreateTranslationDesat(int a, int b, _Accum r1, _Accum g1, _Accum b1, _Accum r2, _Accum g2, _Accum b2) __asmcode(ACSE_TRANSLATION_DESAT);
__asmfunc void     CreateTranslationPalette(int a, int b, int c, int d) __asmcode(ACSE_TRANSLATION_PALETTE);
__asmfunc void     CreateTranslationRGB(int a, int b, int r1, int g1, int b1, int r2, int g2, int b2) __asmcode(ACSE_TRANSLATION_RGB);
__asmfunc void     CreateTranslationEnd(void) __asmcode(ACSE_TRANSLATION_END);
__asmfunc void     SetResultValue(int) __asmcode(SET_SCRRET);

// Players
__asmfunc int      CheckPlayerCamera(int) __asmcode(ACSE_PLAYER_GET_CAMERA);
__asmfunc int      GetPlayerInfo(int, int) __asmcode(ACSE_PLAYER_GET_INFO);
__asmfunc int      GetPlayerInput(int, int) __asmcode(ACSE_PLAYER_GET_INPUT);
__asmfunc _Accum   GetPlayerInputFixed(int, int) __asmcode(ACSE_PLAYER_GET_INPUT);
__asmfunc int      PlayerClass(int) __asmcode(ACSE_PLAYER_GET_CLASS);
__asmfunc int      PlayerFrags(void) __asmcode(ACSE_THING_GET_FRAGS);
__asmfunc _Bool    PlayerInGame(int) __asmcode(ACSE_PLAYER_GET_INGAME);
__asmfunc _Bool    PlayerIsBot(int) __asmcode(ACSE_PLAYER_GET_ISBOT);
__asmfunc int      PlayerNumber(void) __asmcode(ACSE_THING_GET_PLAYERNUMBER);

// Sectors
__asmfunc void     ChangeCeiling(int, __string) __asmcode_imm(ACS_STAG_SET_TEXTURE_CEILING);
__asmfunc void     ChangeFloor(int, __string) __asmcode_imm(ACS_STAG_SET_TEXTURE_FLOOR);
__asmfunc _Accum   GetSectorCeilingZ(int, int _A(0), int _A(0)) __asmcode(ACSE_STAG_GET_Z_CEILING);
__asmfunc _Accum   GetSectorFloorZ(int, int _A(0), int _A(0)) __asmcode(ACSE_STAG_GET_Z_FLOOR);
__asmfunc int      GetSectorLightLevel(int) __asmcode(ACSE_STAG_GET_LIGHTLEVEL);
__asmfunc void     SectorDamage(int, int, __string, __string, int) __asmcode(ACSE_STAG_DAMAGE);
__asmfunc void     SetCeilingTrigger(int, int, int _A(0), int _A(0), int _A(0), int _A(0), int _A(0), int _A(0)) __asmcode(ACSE_STAG_SET_TRIGGER_CEILING);
__asmfunc void     SetFloorTrigger(int, int, int _A(0), int _A(0), int _A(0), int _A(0), int _A(0), int _A(0)) __asmcode(ACSE_STAG_SET_TRIGGER_FLOOR);
__asmfunc int      ThingCountNameSector(__string, int, int) __asmcode(ACSE_STAG_GET_THINGCOUNT_STR);
__asmfunc int      ThingCountSector(int, int, int) __asmcode(ACSE_STAG_GET_THINGCOUNT_SID);

// Sounds
__asmfunc void     ActivatorSound(__string, int _A(127)) __asmcode(ACSE_SOUND_THING);
__asmfunc void     AmbientSound(__string, int _A(127)) __asmcode(ACS_SOUND_AMBIENT);
__asmfunc void     LocalAmbientSound(__string, int _A(127)) __asmcode(ACSE_SOUND_AMBIENTLOCAL);
__asmfunc void     LocalSetMusic(__string, int _A(0), int _A(0)) __asmcode_imm(ACSE_GAME_SET_MUSICLOCAL);
__asmfunc void     SectorSound(__string, int _A(127)) __asmcode(ACS_SOUND_SECTOR);
__asmfunc void     SetMusic(__string, int _A(0), int _A(0)) __asmcode_imm(ACSE_GAME_SET_MUSIC);
__asmfunc void     SoundSequence(__string) __asmcode(ACS_SOUND_SEQUENCE);
__asmfunc void     ThingSound(int, __string, int _A(127)) __asmcode(ACS_SOUND_MTAG);

// Spawning
__asmfunc int      Spawn(__string, _Accum, _Accum, _Accum, int _A(0), int _A(0)) __asmcode_imm(ACSE_SPAWN_POINT);
__asmfunc void     SpawnProjectile(int, __string, int, int, int _A(0), int _A(0), int _A(0)) __asmcode(ACSE_SPAWN_PROJECTILE_STR);
__asmfunc int      SpawnSpot(__string, int, int _A(0), int _A(0)) __asmcode_imm(ACSE_SPAWN_SPOT_ANGLE);
__asmfunc int      SpawnSpotFacing(__string, int, int _A(0)) __asmcode(ACSE_SPAWN_SPOT);
__asmfunc void     Thing_Projectile2(int, int, int, int, int _A(0), int _A(0), int _A(0)) __asmcode(ACSE_SPAWN_PROJECTILE_SID);

// Strings
__asmfunc _Bool    StrCpy(char *dst, int dstArray, int, int dstSize, __string src, int srcOffset _A(0)) __asmcode(ACSE_STRING_COPY_GLOBALRANGE);
__asmfunc _Bool    StrCpyMap(int dstIndex, int dstArray, int, int dstSize, __string src, int srcOffset _A(0)) __asmcode(ACSE_STRING_COPY_MAPRANGE);
__asmfunc _Bool    StrCpyWorld(int dstIndex, int dstArray, int, int dstSize, __string src, int srcOffset _A(0)) __asmcode(ACSE_STRING_COPY_WORLDRANGE);
__asmfunc _Bool    StrCpyGlobal(int dstIndex, int dstArray, int, int dstSize, __string src, int srcOffset _A(0)) __asmcode(ACSE_STRING_COPY_GLOBALRANGE);
__asmfunc _Bool    StrLen(__string) __asmcode(ACSE_STRING_GET_LENGTH);

// Waiting
__asmfunc void     Delay(int) __asmcode_imm(ACS_WAIT_TICS);
__asmfunc void     PolyWait(int) __asmcode_imm(ACS_WAIT_POLYOBJECT);
__asmfunc void     ScriptWait(int) __asmcode_imm(ACS_WAIT_SCRIPT);
__asmfunc void     Suspend(void) __asmcode(JMP_HLT);
__asmfunc void     TagWait(int) __asmcode_imm(ACS_WAIT_STAG);


//----------------------------------------------------------------------------|
// Cleanup                                                                    |
//

#undef __asmfunc
#undef __asmcode
#undef __asmcode_imm

#undef _A

#endif//__HEADER__ZBUILTIN_ACS__

